--A managed service that enables you to easily encrypt your data. KMS provides a highly available key storage, management, and auditing solution for you to encrypt data within your own applications and control the encryption of stored data across AWS services.
Features
KMS is integrated with CloudTrail, which provides you the ability to audit who used which keys, on which resources, and when.
Customer master keys (CMKs) are used to control access to data encryption keys that encrypt and decrypt your data.
You can choose to have KMS automatically rotate master keys created within KMS once per year without the need to re-encrypt data that has already been encrypted with your master key.
To help ensure that your keys and your data is highly available, KMS stores multiple copies of encrypted versions of your keys in systems that are designed for 99.999999999% durability.
You can connect directly to AWS KMS through a private endpoint in your VPC instead of connecting over the Internet. When you use a VPC endpoint, communication between your VPC and AWS KMS is conducted entirely within the AWS network.
You can define VPC Endpoint policies, enabling you to increase the granularity of your security controls by specifying which principals can access your endpoint, which API calls they can make, and which resources they can access.
--Concepts

Customer Master Keys (CMKs) – You can use a CMK to encrypt and decrypt up to 4 KB of data. Typically, you use CMKs to generate, encrypt, and decrypt the data keys that you use outside of KMS to encrypt your data. Master keys are 256-bits in length.
There are three types of CMKs:
Customer managed CMKs are CMKs that you create, own, and manage. You have full control over these CMKs, including establishing and maintaining their key policies, IAM policies, and grants, enabling and disabling them, rotating their cryptographic material, adding tags, creating aliases that refer to the CMK, and scheduling the CMKs for deletion.
AWS managed CMKs are CMKs in your account that are created, managed, and used on your behalf by an AWS service that integrates with KMS. You can view the AWS managed CMKs in your account, view their key policies, and audit their use in CloudTrail logs. However, you cannot manage these CMKs or change their permissions. And, you cannot use AWS managed CMKs in cryptographic operations directly; the service that creates them uses them on your behalf.
AWS owned CMKs are not in your AWS account. They are part of a collection of CMKs that AWS owns and manages for use in multiple AWS accounts. AWS services can use AWS owned CMKs to protect your data. You cannot view, manage, or use AWS owned CMKs, or audit their use.
Data keys – Encryption keys that you can use to encrypt data, including large amounts of data and other data encryption keys.
You can use CMKs to generate, encrypt, and decrypt data keys. However, KMS does not store, manage, or track your data keys, or perform cryptographic operations with data keys.
Data keys can be generated at 128-bit or 256-bit lengths and encrypted under a master key you define.
Envelope encryption -The practice of encrypting plaintext data with a data key, and then encrypting the data key under another key. The top-level plaintext key encryption key is known as the master key.
Encryption Context – All KMS cryptographic operations accept an encryption context, an optional set of key–value pairs that can contain additional contextual information about the data.
Key Policies – When you create a CMK, permissions that determine who can use and manage that CMK are contained in a document called the key policy.
Grants – A grant is an alternative to the key policy. You can use grants to give long-term access that allows AWS principals to use your customer managed CMKs.
Grant Tokens – When you create a grant, the permissions specified in the grant might not take effect immediately due to eventual consistency. If you need to mitigate the potential delay, use a grant token instead.
When you enable automatic key rotation for a customer-managed CMK, KMS generates new cryptographic material for the CMK every year. KMS also saves the CMK’s older cryptographic material so it can be used to decrypt data that it encrypted.
An alias is an optional display name for a CMK. Each CMK can have multiple aliases, but each alias points to only one CMK. The alias name must be unique in the AWS account and region.
--Importing Keys
A CMK contains the key material used to encrypt and decrypt data. When you create a CMK, by default AWS KMS generates the key material for that CMK. But you can create a CMK without key material and then import your own key material into that CMK.
When you import key material, you can specify an expiration date. When the key material expires, KMS deletes the key material and the CMK becomes unusable. You can also delete key material on demand.
Deleting Keys
Deleting a CMK deletes the key material and all metadata associated with the CMK and is irreversible. You can no longer decrypt the data that was encrypted under that CMK, which means that data becomes unrecoverable.
You can create a CloudWatch alarm that sends you a notification when a user attempts to use the CMK while it is pending deletion.
You can temporarily disable keys so they cannot be used by anyone.
KMS supports custom key stores backed by AWS CloudHSM clusters. A key store is a secure location for storing cryptographic keys.
You can connect directly to AWS KMS through a private endpoint in your VPC instead of connecting over the internet. When you use a VPC endpoint, communication between your VPC and AWS KMS is conducted entirely within the AWS network.
--Pricing
Each customer master key that you create in KMS, regardless of whether you use it with KMS-generated key material or key material imported by you, costs you until you delete it.
For a CMK with key material generated by KMS, if you opt-in to have the CMK automatically rotated each year, each newly rotated version will raise the cost of the CMK per month.

---AWS Web Application Firewall – WAF
AWS WAF is a web application firewall that helps monitor HTTP/ HTTPS requests forwarded to CloudFront and allows controlling access to the content.
WAF allows defining conditions for e.g. request originated IP addresses or query strings values, based on which CloudFront responds to requests either with the requested content or with an access denied (HTTP 403)
CloudFront can be configured to return a custom error page when a request is blocked.
AWS WAF allows the following behaviours:
Allow all requests except the ones specified – Useful when CloudFront serves content for a public website but wants to block requests from attackers.
Block all requests except the ones specified – Useful when CloudFront serves content for a restricted website whose users can be readily identifiable by properties in web requests for e.g IP addresses the request originate from
Count the requests that match the specified properties – allows counting of the requests that match the defined properties, which can be useful when configuring and testing allow or block requests using new properties. After confirming that config did not accidentally block all of the traffic to the website, configuration can be applied to change the behavior to allow or block requests.
--WAF Benefits
Additional protection against web attacks using specified conditions
Conditions can be defined by using characteristics of web requests such as the following:
IP addresses that the requests originate from
Values in request headers
Strings that appear in the requests
Length of requests
Presence of SQL code that is likely to be malicious (this is known as SQL injection)
Presence of a script that is likely to be malicious (this is known as cross-site scripting)
Rules that you can reuse for multiple web applications
Real-time metrics and sampled web requests
Automated administration using the WAF API
--How WAF Works
WAF allows controlling behaviour to web requests by creating conditions, rules, and web access control lists (web ACLs).
Conditions
Conditions define basic characteristics to watch for in a web request


Malicious script – XSS (Cross Site Scripting) – Attackers embed scripts that can exploit vulnerabilities in web applications
IP addresses or address ranges that requests originate from.
Length of specified parts of the request, such as the query string.
Malicious SQL – SQL injection – Attackers try to extract data from the database by embedding malicious SQL code in a web request
Strings that appear in the request, for e.g., values that appear in the User-Agent header or text strings that appear in the query string.Some conditions take multiple values.
Rules
Rules are basically Combination of Conditions to precisely target the requests to be allowed or blocked.
When a rule includes multiple conditions, WAF looks for requests that match all the conditions-it ANDs the conditions together.
for e.g., based on recent requests that you’ve seen from an attacker, you might create a rule that includes the following conditions:
The requests come from 192.0.2.44.
They contain the value BadBot in the User-Agent header.
They appear to include malicious SQL code in the query string.
All 3 conditions should be satisfied for the Rule to be passed and the associated action to be taken
--Web ACLs
Web ACLs provides
Combination of Rules
Action – allow, block or count to perform for each rule
WAF compares a request with the rules in a web ACL in the order in which its listed and takes the action that is associated with the first rule that the request matches.
For multiple rules in a web ACL, WAF evaluates each request against the rules in the order they are listed in the web ACL.
When a web request matches all of the conditions in a rule, WAF immediately takes the action—allow or block—and doesn’t evaluate the request against the remaining rules in the web ACL, if any.
Default action
determines whether WAF allows or blocks a request that does not match all of the conditions in any of the rules
Web Application Firewall Sandwich Architecture

DDoS attacks at the application layer commonly target web applications with lower volumes of traffic compared to infrastructure attacks.
WAF can be included as part of the infrastructure to mitigate these types of attacks
WAFs act as filters that apply a set of rules to web traffic, which cover exploits like XSS and SQL injection but can also help build resilience against DDoS by mitigating HTTP GET or POST floods.
HTTP works as a request-response protocol between end users and applications where end users request data (GET) and submit data to be processed (POST). GET floods work by requesting the same URL at a high rate or requesting all objects from your application. POST floods work by finding expensive application processes, i.e., logins or database searches, and triggering those process to overwhelm your application.
WAFs have several features that may prevent these types of attacks from affecting the application availability for e.g. HTTP rate limiting which limits the number of requests per end user within a certain time period. Once the threshold is exceeded, WAFs can block or buffer new requests to ensure other end users have access to the application .
WAFs can also inspect HTTP requests and identify those that don’t confirm to normal patterns
In the “WAF sandwich,” the EC2 instance running the WAF software (not the AWS WAF) is included in an Auto Scaling group and placed in between two ELB load balancers. Basic load balancer in the default VPC will be the frontend, public facing load balancer that will distribute all incoming traffic to the WAF EC2 instance.
With the WAF sandwich pattern, the instance can scale and add additional WAF EC2 instances should the traffic spike to elevated levels.
Once the traffic has been inspected and filtered, the WAF EC2 instance forwards traffic to the internal, backend load balancer which then distributes traffic across the application EC2 instance.
This configuration allows the WAF EC2 instances to scale and meet capacity demands without affecting the availability of your application EC2 instance.


GuardDuty is a regional service.
Threat detection categories
Reconnaissance — Activity suggesting reconnaissance by an attacker, such as unusual API activity, intra-VPC port scanning, unusual patterns of failed login requests, or unblocked port probing from a known bad IP.
Instance compromise — Activity indicating an instance compromise, such as cryptocurrency mining, backdoor command and control activity, malware using domain generation algorithms, outbound denial of service activity, unusually high volume of network traffic, unusual network protocols, outbound instance communication with a known malicious IP, temporary Amazon EC2 credentials used by an external IP address, and data exfiltration using DNS.
Account compromise — Common patterns indicative of account compromise include API calls from an unusual geolocation or anonymizing proxy, attempts to disable AWS CloudTrail logging, changes that weaken the account password policy, unusual instance or infrastructure launches, infrastructure deployments in an unusual region, and API calls from known malicious IP addresses.

---Amazon GuardDuty provides three severity levels (Low, Medium, and High) to allow you to prioritise response to potential threats.
CloudTrail Event Source
GuardDuty analyses CloudTrail management events and S3 data events. (Read about types of CloudTrail trails for more information.)
GuardDuty processes all CloudTrail events that come into a region, including global events that CloudTrail sends to all regions, such as AWS IAM, AWS STS, Amazon CloudFront, and Route 53.
VPC Flow Logs Event Source
VPC Flow Logs capture information about the IP traffic going to and from Amazon EC2 network interfaces in your VPC.
DNS Logs Event Source
If you use AWS DNS resolvers for your EC2 instances (the default setting), the GuardDuty can access and process your request and response DNS logs through the internal AWS DNS resolvers. Using other DNS resolvers will not provide GuardDuty access to its DNS logs.
GuardDuty vs Macie
Amazon GuardDuty provides broad protection of your AWS accounts, workloads, and data by helping to identify threats such as attacker reconnaissance, instance compromise, and account compromise. Amazon Macie helps you protect your data in Amazon S3 by helping you classify what data you have, the value that data has to the business, and the behaviour associated with access to that data.
GuardDuty Findings
GuardDuty generates findings when it detects unexpected and potentially malicious activity in your AWS environment. These are viewable via Console, GuardDuty CLI or API operations.
A Finding’s summary includes:
Finding type – a concise yet readable description of the potential security issue.
Severity – a finding’s assigned severity level of either High, Medium, or Low.
Region – the AWS region in which the finding was generated.
Count – the number of times GuardDuty generated the finding after you enabled GuardDuty in your AWS account.
Account ID – the ID of the AWS account in which the activity took place that prompted GuardDuty to generate this finding.
Resource ID – the ID of the AWS resource against which the activity took place that prompted GuardDuty to generate this finding.
Threat list name – the name of the threat list that includes the IP address or the domain name involved in the activity that prompted GuardDuty to generate the finding.
Last seen – the time (your local timezone if checked through console, and UTC if checked through CLI or API) at which the activity took place that prompted GuardDuty to generate this finding.
A finding’s Resource affected section includes:
Resource role – a value that usually is set to Target because the affected resource can be a potential target of an attack.
Resource type – the type of the affected resource. This value is either AccessKey or Instance.
Instance ID – the ID of the EC2 instance involved in the activity that prompted GuardDuty to generate the finding.
Port – the port number for the connection used during the activity that prompted GuardDuty to generate the finding.
Access key ID – access key ID of the user engaged in the activity that prompted GuardDuty to generate the finding.
Principal ID – the principal ID of the user engaged in the activity that prompted GuardDuty to generate the finding.
User type – the type of user engaged in the activity that prompted GuardDuty to generate the finding.
Username – The name of the user engaged in the activity that prompted GuardDuty to generate the finding.
A finding’s Action section includes:
Action type – the finding activity type. This value can be one of the following: NETWORK_CONNECTION, AWS_API_CALL, PORT_PROBE, or DNS_REQUEST.
API – the name of the API operation that was invoked and thus prompted GuardDuty to generate this finding.
Service name – the name of the AWS service (GuardDuty) that generated the finding.
Connection direction – the network connection direction observed in the activity that prompted GuardDuty to generate the finding. The values can be INBOUND, OUTBOUND, and UNKNOWN.
Protocol – the network connection protocol observed in the activity that prompted GuardDuty to generate the finding.
A finding’s Actor section includes:
Location – location information of the IP address involved in the activity that prompted GuardDuty to generate the finding.
Organisation – ISP organisation information of the IP address involved in the activity that prompted GuardDuty to generate the finding.
IP address – the IP address involved in the activity that prompted GuardDuty to generate the finding.
Port – the port number involved in the activity that prompted GuardDuty to generate the finding.
Domain – the domain involved in the activity that prompted GuardDuty to generate the finding.
A finding’s Details section includes:
ThreatPurpose – describes the primary purpose of a threat or a potential attack. Can have the following values:
Backdoor – this value indicates that the attack has compromised an AWS resource and is capable of contacting its home command and control (C&C) server to receive further instructions for malicious activity.
Behaviour – this value indicates that GuardDuty is detecting activity or activity patterns that are different from the established baseline for a particular AWS resource.
Cryptocurrency – this value indicates that GuardDuty is detecting software that is associated with cryptocurrencies.
Pentest – sometimes owners of AWS resources or their authorised representatives intentionally run tests against AWS applications to find vulnerabilities, like open security groups or access keys that are overly permissive. These pen tests are done in an attempt to identify and lock down vulnerable resources before they are discovered by attackers.
Persistence – this value indicates that a principal in your AWS environment is exhibiting behaviour that is different from the established baseline. Such as a principal has no prior history of updating network configuration settings, or updating policies or permissions attached to AWS users or resources.
Policy – this value indicates that your AWS account is exhibiting behaviour that goes against recommended security best practices.
PrivilegeEscalation – this value informs you that a specific principal in your AWS environment is exhibiting behaviour that can be indicative of a privilege escalation attack.
Recon – this value indicates that a reconnaissance attack is underway, scoping out vulnerabilities in your AWS environment by probing ports, listing users, database tables, and so on.
ResourceConsumption – this value indicates that a principal in your AWS environment is exhibiting behaviour that is different from the established baseline. Such a principal has no prior history of launching EC2 instances.
Stealth – this value indicates that an attack is actively trying to hide its actions and its tracks.
Trojan – this value indicates that an attack is using Trojan programs that silently carry out malicious activity. Sometimes this software takes on the appearance of a legitimate program. Sometimes users accidentally run this software. Other times this software might run automatically by exploiting a vulnerability.
UnauthorizedAccess – this value indicates that GuardDuty is detecting suspicious activity or a suspicious activity pattern by an unauthorised individual.
ResourceTypeAffected – describes which AWS resource is identified in this finding as the potential target of an attack. Currently, only EC2 instances and principals (and their credentials) can be identified as affected resources in GuardDuty findings.
ThreatFamilyName – describes the overall threat or potential malicious activity that GuardDuty is detecting.
ThreatFamilyVariant – describes the specific variant of the ThreatFamily that GuardDuty is detecting. Attackers often slightly modify the functionality of the attack, thus creating new variants.
Artefact – describes a specific resource that is owned by a tool that is used in the attack.
You can create filters for your GuardDuty findings.
A suppression rule is a filter used to automatically archive new findings. After you create a suppression rule, new findings that match the criteria defined in the rule are automatically archived.
GuardDuty supports exporting active findings to CloudWatch Events and, optionally, to an Amazon S3 bucket. New Active findings that GuardDuty generates are automatically exported within about 5 minutes after the finding is generated. 
Trusted IP Lists and Threat Lists
Trusted IP lists consist of IP addresses that you have whitelisted for secure communication with your AWS infrastructure and applications. GuardDuty does not generate findings for IP addresses on trusted IP lists. 
At any given time, you can have only one uploaded trusted IP list per AWS account per region.
Threat lists consist of known malicious IP addresses. GuardDuty generates findings based on threat lists. 
At any given time, you can have up to six uploaded threat lists per AWS account per region.
Pricing
Pricing is based on the quantity of AWS CloudTrail Events analysed (per 1,000,000 events) and the volume of Amazon VPC Flow Log and DNS Log data analysed (per GB).

