---AMAZON CLOUDWATCH.
Amazon CloudWatch is an AWS monitoring and management service which is designed for the purpose of maintaining the services and resources which are used. Particularly, this is designed for developers, site reliability engineers, IT managers, and system operators to make their life easier.

But how does it help in AWS monitoring and managing our AWS services? It collects and displays the stats data, metrics, and insights on particular AWS services and your applications which lets you manage precisely what you want to manage. The collection data is in the form of logs, metrics and events for each AWS service and resource. Using CloudWatch you can create automated actions, troubleshooting is much easier, and optimise your applications by removing the factor increasing your applications latency.
--FEATURES
AWS CloudWatch Logging Service
Includes storing, monitoring, viewing, capturing, and managing service and application logs 
---AWS CloudWatch Metrics Services
CloudWatch offers metrics services that include capturing and managing the performance of the resource and operational metrics.
Now, let us have a look at the combined features of both Logging and Metric services by CloudWatch
CloudWatch Logs insights – An interactive tool for log query that helps in visualising and analysing log data. Whether it is about creating time-series graphs to visualise the data or publishing to CloudWatch dashboard, the log insights tool assists in filtering and aggregating log data.
CloudWatch Logs – With the help of this feature, users can collect and store logs for various AWS services like AWS CloudTrail, AWS API Gateway, etc, or for specific applications and on-premise resources.
CloudWatch Alarms – The CloudWatch Alarm constantly keeps on monitoring the CloudWatch metrics. It raises an alert if the metric (or metrics) exceeds the set/specified thresholds. The alarm’s status can also be displayed on the CloudWatch dashboard.
Auto Scaling – AWS auto scaling of CloudWatch is responsible for the automation of capacity and resource planning.
--AWS Integration – CloudWatch is known to facilitate integration with AWS Identity and Access management. These integration features give a management console, ownership to manage and control access to ClodWatch data and resources.
--CloudWatch Events – It picks for the state changes to the AWS resources and is responsible for creating a near real-time stream of events routed to targets for processing. Eventually, the targets are notified of the state changes with the help of these events.
--How Amazon CloudWatch Works?
CloudWatch performs 4 actions normally, first it collects log and metric data, then monitors the applications, then Acts according to the instructions, finally analyzes the collected log and metric data for further usage.
You can mention the service in CloudWatch and it starts collecting it’s raw log and metrics data. Even while collecting it keeps on monitoring and updates the data. While AWS monitoring, if any issues are found, it will act and try to troubleshoot it. With all the collected log and metric data, it will analyse and produce visualised content for better understanding and further usage.
Advantages of Amazon CloudWatch
One dashboard, Access all data
The web applications produce a lot of data as they are highly distributed, to access all the data which have been collected you just need a single CloudWatch dashboard.
Visibility on the complete Infrastructure
You can see through all the AWS resources and services you use, so you can correlate and contradict data produced from multiple services.
Improve total cost of ownership
CloudWatch can be used to set high resolution alarms and can take automated actions while there is a breach in the limits provided. This can help in minimise the costs spent on AWS services
Insights from logs
You receive detailed insights on separate AWS services and the applications you run on the infrastructure. Data like memory, CPU utilisation, and capacity utilisation can be monitored and receive insights from it
Optimise Applications and resources
Using the log and metric data, you can optimise your AWS services to provide maximum throughput and performance.
AWS CloudWatch Pricing
AWS CloudWatch pricing comes in 2 tiers: Free tier and Paid tier. In both cases, there are no upfront or commitment fees. The Free tier includes services like monitoring metrics, dashboards, logs, alarms, events, contributor insights, and synthetics, etc. 
The charges for the paid tier are based on the “Pay for what you use” model and the billing date is the end date of every month. This bill amount will be generated based on the quantity of the metrics, API, and metric streams used.
--Benefits of CloudWatch
Many organisations have been using AWS resources and applications and hence, they are reaping numerous benefits of CloudWatch. We have listed below some of the benefits of using CloudWatch:
Ease of streaming CloudWatch log data to Amazon Elasticsearch and real-time processing of the same 
Full utilisation of the resources
Easy integration of system based on AWS EC2 instances 
Stability and Reliability 
Ease of usability
Effective monitoring of AWS resources
Facilitates notification of anomalies detected via Amazon SNS



--AWS CloudTrail is an auditing, compliance monitoring, and governance tool from Amazon Web Services (AWS). It’s classed as a “Management and Governance” tools in the AWS console.
With CloudTrail, AWS account owners can ensure every API call made to every resource in their AWS account is recorded and written to a log. An API call can be made:
when a resource is accessed from the AWS console
when someone runs an AWS CLI command
when a REST API call is made to an AWS resource
These actions can be coming from:
Human users (e.g. when someone spins-up an EC2 instance from the console)
Applications (e.g. when a bash script calls an AWS CLI command)
another AWS service (e.g. when a Lambda function writes to an S3 bucket)
CloudTrail saves the API events in a secured, immutable format which can be used for later analysis.
--AWS CloudTrail Features
Amazon CloudTrail has a number of features you would expect from a monitoring and governance tool. These features include:
AWS CloudTrail is “Always On,” enabling you to view data from the most recent 90 days.
Event History to allow you to see all changes made.
Multi-region configuration.
Log file integrity validation and encryption.
Data events, management events, and CloudTrail Insights.
--Amazon CloudTrail Pricing
Amazon CloudTrail pricing is free of charge if you set up a single trail to deliver a single copy of management events in each region. With CloudTrail, you can even download, filter, and view data from the most recent 90 days for all management events at no cost.
Keep in mind Amazon S3 charges will apply based on your usage.
Additionally, you can use AWS CloudTrail Insights by enabling Insights events in your trails. AWS CloudTrail Insights are charged per the number of events in each region. Pricing is as follows:
Management Events: $2.00 per 100,000 events
Data Events: $0.10 per 100,000 events
CloudTrail Insights: $0.35 per 100,000 write management events
--CloudTrail Event History
AWS account administrators don’t have to do anything to enable CloudTrail: it’s enabled by default when an account is created. This is the default trail. Information in this trail is kept for the last 90 days in a rolling fashion.

--Creating a Trail
It’s also possible to create custom trails. A trail is a user-created audit definition that can capture one or more types of events. Unlike Event history, CloudTrail trail logs are not limited to 90 days retention. They can be delivered to an S3 bucket or to AWS CloudWatch Logs and configured to send SNS notifications when a particular event happens.

First, we need to give our trail a name. This can be anything meaningful. We also need to specify if the trail will audit account activities in all regions or only the current region. For multi-account setups, we can also specify if the trail should be enabled at the Organisation level.

Next, we specify if we want to track “read events” like “Describe” or “List” API operations, “write events” like “Create” or “Delete” operations, both types of operations or none at all. These events are considered “management events” because they are related to actions performed on the resources, not actions happening within the resources.

Next, we have “data events”. Data events track API operations happening within a specific resource. At the time of writing, two types of resource operations are supported: S3 and Lambda.    
With data events, it’s possible to track S3 bucket level operations such as “PutObject”. We can track it for all buckets, or specific buckets:

For Lambda, the trail can capture an event every time any function or a specific function is invoked:

Finally, we need to specify where will be the trail data stored:

There are two options to ensure the logs are secured: each file with a KMS key, and optionally, let CloudTrail validate the file. With validation, CloudTrail checks if the generated log file was altered before it was saved to S3.
Administrators can also choose to get notified via SNS alert every time a CloudTrail log file is created.
--AWS CloudTrail Files
The image below shows files from the trail we created before (Trail1), saved under the athena-cloudtrails bucket. The files are gzipped archives and have a naming pattern of:
<account_id>_CloudTrail_<region>_yyyymmdd<time>_<unique_hex_number>.json.gz

If validation is enabled, CloudTrail creates another separate folder structure with the naming pattern:
/AWSLogs/<account_id>/CloudTrail-Digest/<region>/yyyy/mm/dd
These folders are used to store the digest files. A digest file stores the names of the log files delivered to the S3 bucket in the last one hour, their hash values and a “digital signature” of the last digest file. CloudTrail uses the digital signatures and the hash values to validate that files have not been tampered with since they were stored.
Enabling / Disabling Trails
We can enable or disable an existing trail by toggling the button at the top right corner of the trail’s property screen:

This may be necessary when you have a number of trails running in your account and you are not sure which one is used by your log management monitoring platform. You can selectively disable one trail after another and check.
Sending AWS CloudTrails to CloudWatch
Like CloudTrail, Amazon CloudWatch is a core service of the AWS platform. Simply put, CloudWatch can be considered as the eyes and ears of any AWS account. While CloudTrail tracks and records API calls made to objects, CloudWatch offers a number of facilities for monitoring other resources in the account, sending alerts based on the resource state, scheduling Lambda functions and other jobs, and hosting log files from different AWS services and resources.
Some typical use cases of CloudWatch can be:
AWS billing alerts
EC2 auto-scaling alerts
Performance monitoring dashboards for RDS instances
CloudWatch events for Lambda functions or data pipelines
CloudWatch log groups and log streams for different resource types (e.g. VPC flow logs)
It’s possible to publish CloudTrail events to CloudWatch Logs. With this approach, CloudTrail can take advantage of CloudWatch features such as:
Easy searching through logs
Sending alerts on logged events
Creating metric filters and dashboards from logged events
To send a trail to CloudWatch, two things need to exist:
A CloudWatch log group and a log stream
An IAM role and its policy that grants CloudTrail access to CloudWatch
The feature to send CloudTrail events to CloudWatch Logs becomes available after the trail has been created. To use CloudWatch, the trail needs to be edited afterward. In the image below, we are editing and configuring our Trail1 to publish its logs to CloudWatch.

Clicking the “Configure” button brings up the next section:

CloudWatch needs to know the log group and log stream names where the events will be published to. We can choose the default log group (“CloudTrail”) as suggested, or specify an existing log group. Each trail configured to send its logs to CloudWatch will have a log stream under this log group.
When we click “Continue”, the wizards asks for the IAM role to use:

Once again, we can specify our own custom role and policy, or let the wizard create a role and policy for us. The default name for the role will be “CloudTrail_CloudWatchLogs_Role”. The IAM policy attached to this role will grant CloudTrail “CreateLogStream”, and “PutLogEvents” rights to CloudWatch Logs.
Once the IAM role and policy have been specified, we can save the changes.
Next, we can browse to the log group and see the log stream for the trail has been created:

The naming pattern for the log stream is:
<account_id>_CloudTrail_<region>
Inside the log stream, we can view the log events:

Although it’s simple to send CloudTrail logs to CloudWatch, users need to be mindful of a limitation. The maximum event size in CloudWatch Logs is 256 KB. CloudTrail respects that and will not send an event’s data to CloudWatch Logs if it’s more than that size.
CloudTrail Best Practices
If you are using AWS Organisations to manage your multi-account setup, create a trail to apply to the organisation. This trail will be created in the master account and will log events from the master account and other member accounts. The trail will serve as a “master” log for all activities in your AWS setup.
Include all regions in your Trail. You may think you are creating AWS resources in only one region, but chances are, someone may create a resource in a different region. This is typically the case for PoCs or when people don’t pay attention. If not careful, these resources could be running undetected, costing money.
Unless you are interested in finding out who is accessing or listing your resources, record only “write events” in the trail. This will show resource creation, modification and deletion events, and reduce log size.
People often create multiple trails. Too many logs can increase S3 storage costs over time and cause confusion. Create one trail to capture everything unless there is a need to create separate trails.
 Also, don’t create separate trails in each region, choose a “master region” and configure your trail to capture events from all regions. The reason to include all regions in your trail is to ensure it’s visible from every regions’ CloudTrail console. By default, a trail that does not include all regions is only visible in the region where it was created.
If you are searching for recent events (in the last 90 days), use event history instead of searching through S3 files. This will improve the query time.
Don’t send CloudTrail logs to CloudWatch unless you are sure none of your event data will ever cross the 256 KB limit. This is even more important if you are using CloudWatch alarms for security and network-related API calls. If some events are dropped because of their sizes, you may miss important alerts.

